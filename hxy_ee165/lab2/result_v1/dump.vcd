$date
	Sun Feb 28 09:09:22 2021
$end
$version
	QuestaSim Version 2020.1_1
$end
$timescale
	1ns
$end

$scope module tn_fifo $end
$var parameter 32 ! N_ADDR_BITS $end
$var parameter 32 " FIFO_WIDTH $end
$var parameter 32 # n_flops $end
$var reg 1 $ reset $end
$var reg 1 % rd_en $end
$var reg 1 & wr_en $end
$var reg 1 ' clk $end
$var reg 1 ( fifo_empty $end
$var reg 1 ) fifo_full $end
$var reg 2 * wr_data [1:0] $end
$var reg 2 + rd_data [1:0] $end
$var reg 2 , rm_rd_data [1:0] $end
$var reg 4 - count [3:0] $end
$var integer 32 . n_items $end

$scope function get_data $end
$var reg 2 / get_data [1:0] $end
$upscope $end

$scope module F $end
$var parameter 32 0 N_ADDR_BITS $end
$var parameter 32 1 FIFO_DEPTH $end
$var wire 1 2 reset $end
$var wire 1 3 rd_en $end
$var wire 1 4 wr_en $end
$var wire 1 5 clk $end
$var reg 2 6 wr_data [1:0] $end
$var reg 1 7 empty $end
$var reg 1 8 full $end
$var reg 2 9 rd_data [1:0] $end
$var reg 3 : rd_ptr [2:0] $end
$var reg 3 ; wr_ptr [2:0] $end
$upscope $end
$upscope $end

$scope begin std $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1$
0%
0&
0'
x(
x)
bx *
bx +
bx ,
bx -
bx 6
x7
x8
bx 9
bx :
bx ;
bx /
b10 !
b10 "
b100 #
b10 0
b100 1
b0 .
05
04
03
12
$end
#10
1'
15
b0 -
b0 :
b0 ;
b0 ,
17
08
0)
1(
#20
0'
05
#30
1'
15
#40
0'
05
0$
1&
b0 /
b0 *
b0 6
02
14
#50
1'
15
b1 ;
b1 -
07
0(
#60
0'
05
b1 /
b1 *
b1 6
#70
1'
15
b10 ;
b10 -
#80
0'
05
#90
1'
15
b11 ;
b11 -
#100
0'
05
0&
1%
b11 /
b11 *
b11 6
04
13
#110
1'
15
b0 9
b1 :
b10 -
b0 +
#120
0'
05
b1 /
b1 *
b1 6
#130
1'
15
b1 9
b10 :
b1 -
b1 +
b1 ,
#140
0'
05
0%
1&
03
14
#150
1'
15
b100 ;
b10 -
#160
0'
05
#170
1'
15
b101 ;
b11 -
#180
0'
05
b10 /
b10 *
b10 6
#190
1'
15
b110 ;
b100 -
bx ,
18
1)
#200
0'
05
0&
1%
b1 /
b1 *
b1 6
04
13
#210
1'
15
b11 :
b11 -
b1 ,
08
0)
#220
0'
05
#230
1'
15
b100 :
b10 -
#240
0'
05
0%
1&
b10 /
b10 *
b10 6
03
14
#250
1'
15
b111 ;
b11 -
#260
0'
05
b1 /
b1 *
b1 6
#270
1'
15
b0 ;
b100 -
bx ,
18
1)
#280
0'
05
#290
1'
15
b1 ;
b101 -
08
0)
#300
0'
05
0&
1%
b0 /
b0 *
b0 6
04
13
#310
1'
15
bx 9
b101 :
b100 -
bx +
18
1)
#320
0'
05
b1 /
b1 *
b1 6
#330
1'
15
b110 :
b11 -
b10 ,
08
0)
#340
0'
05
0%
1&
b10 /
b10 *
b10 6
03
14
#350
1'
15
b10 ;
b100 -
bx ,
18
1)
#360
0'
05
b1 /
b1 *
b1 6
#370
1'
15
b11 ;
b101 -
08
0)
#380
0'
05
b10 /
b10 *
b10 6
#390
1'
15
b100 ;
b110 -
#400
0'
05
0&
1%
b1 /
b1 *
b1 6
04
13
#410
1'
15
b111 :
b101 -
#420
0'
05
b11 /
b11 *
b11 6
#430
1'
15
b0 :
b100 -
18
1)
#440
0'
05
0%
1&
b10 /
b10 *
b10 6
03
14
#450
1'
15
b101 ;
b101 -
08
0)
#460
0'
05
b11 /
b11 *
b11 6
#470
1'
15
b110 ;
b110 -
#480
0'
05
b10 /
b10 *
b10 6
#490
1'
15
b111 ;
b111 -
#500
0'
05
0&
1%
04
13
#510
1'
15
b1 9
b1 :
b110 -
b1 +
#520
0'
05
b0 /
b0 *
b0 6
#530
1'
15
b10 9
b10 :
b101 -
b10 +
#540
0'
05
0%
1&
b1 /
b1 *
b1 6
03
14
#550
1'
15
b0 ;
b110 -
#560
0'
05
b0 /
b0 *
b0 6
#570
1'
15
b1 ;
b111 -
#580
0'
05
b1 /
b1 *
b1 6
#590
1'
15
b10 ;
b1000 -
17
1(
#600
0'
05
0&
1%
04
13
#610
1'
15
b1 9
b11 :
b111 -
b1 +
07
0(
#620
0'
05
#630
1'
15
b10 9
b100 :
b110 -
b10 +
#640
0'
05
0%
