$date
	Mon Mar  1 01:59:56 2021
$end
$version
	QuestaSim Version 2020.1_1
$end
$timescale
	1ns
$end

$scope module tn_fifo $end
$var parameter 32 ! N_ADDR_BITS $end
$var parameter 32 " FIFO_WIDTH $end
$var parameter 32 # n_flops $end
$var reg 1 $ reset $end
$var reg 1 % rd_en $end
$var reg 1 & wr_en $end
$var reg 1 ' clk $end
$var reg 1 ( fifo_empty $end
$var reg 1 ) fifo_full $end
$var reg 2 * wr_data [1:0] $end
$var reg 2 + rd_data [1:0] $end
$var reg 2 , rm_rd_data [1:0] $end
$var reg 2 - full [1:0] $end
$var reg 2 . empty [1:0] $end
$var integer 32 / n_items $end

$scope function get_data $end
$var reg 2 0 get_data [1:0] $end
$upscope $end

$scope module F $end
$var parameter 32 1 N_ADDR_BITS $end
$var parameter 32 2 FIFO_DEPTH $end
$var wire 1 3 reset $end
$var wire 1 4 rd_en $end
$var wire 1 5 wr_en $end
$var wire 1 6 clk $end
$var reg 2 7 wr_data [1:0] $end
$var reg 1 8 empty $end
$var reg 1 9 full $end
$var reg 2 : rd_data [1:0] $end
$var reg 3 ; rd_ptr [2:0] $end
$var reg 3 < wr_ptr [2:0] $end
$upscope $end
$upscope $end

$scope begin std $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1$
0%
0&
0'
x(
x)
bx *
bx +
bx ,
b0 -
b1 .
bx 7
x8
x9
bx :
bx ;
bx <
bx 0
b10 !
b10 "
b100 #
b10 1
b100 2
b0 /
06
05
04
13
$end
#10
1'
16
b0 ;
b0 <
b0 ,
18
09
0)
1(
#20
0'
06
#30
1'
16
#40
0'
06
0$
1&
b0 0
b0 *
b0 7
03
15
#50
1'
16
b1 <
b1 /
b0 .
08
0(
#60
0'
06
b1 0
b1 *
b1 7
#70
1'
16
b10 <
b10 /
#80
0'
06
#90
1'
16
b11 <
b11 /
#100
0'
06
0&
1%
b11 0
b11 *
b11 7
05
14
#110
1'
16
b0 :
b1 ;
b10 /
b0 +
#120
0'
06
b1 0
b1 *
b1 7
#130
1'
16
b1 :
b10 ;
b1 /
b1 +
b1 ,
#140
0'
06
0%
1&
04
15
#150
1'
16
b100 <
b10 /
#160
0'
06
#170
1'
16
b101 <
b11 /
#180
0'
06
b10 0
b10 *
b10 7
#190
1'
16
b110 <
b100 /
bx ,
b1 -
19
1)
#200
0'
06
0&
1%
b1 0
b1 *
b1 7
05
14
#210
1'
16
b11 ;
b11 /
b1 ,
b0 -
09
0)
#220
0'
06
#230
1'
16
b100 ;
b10 /
#240
0'
06
0%
1&
b10 0
b10 *
b10 7
04
15
#250
1'
16
b111 <
b11 /
#260
0'
06
b1 0
b1 *
b1 7
#270
1'
16
b0 <
b100 /
bx ,
b1 -
19
1)
#280
0'
06
#290
1'
16
b1 <
09
0)
#300
0'
06
0&
1%
b0 0
b0 *
b0 7
05
14
#310
1'
16
bx :
b101 ;
b11 /
bx +
b1 ,
b0 -
19
1)
#320
0'
06
b1 0
b1 *
b1 7
#330
1'
16
b110 ;
b10 /
b10 ,
09
0)
#340
0'
06
0%
1&
b10 0
b10 *
b10 7
04
15
#350
1'
16
b10 <
b11 /
19
1)
#360
0'
06
b1 0
b1 *
b1 7
#370
1'
16
b11 <
b100 /
bx ,
b1 -
09
0)
#380
0'
06
b10 0
b10 *
b10 7
#390
1'
16
b100 <
#400
0'
06
0&
1%
b1 0
b1 *
b1 7
05
14
#410
1'
16
b111 ;
b11 /
b10 ,
b0 -
#420
0'
06
b11 0
b11 *
b11 7
#430
1'
16
b0 ;
b10 /
b1 ,
19
1)
#440
0'
06
0%
1&
b10 0
b10 *
b10 7
04
15
#450
1'
16
b101 <
b11 /
09
0)
#460
0'
06
b11 0
b11 *
b11 7
#470
1'
16
b110 <
b100 /
bx ,
b1 -
#480
0'
06
b10 0
b10 *
b10 7
#490
1'
16
b111 <
#500
0'
06
0&
1%
05
14
#510
1'
16
b1 :
b1 ;
b11 /
b1 +
b10 ,
b0 -
#520
0'
06
b0 0
b0 *
b0 7
#530
1'
16
b10 :
b10 ;
b10 /
b10 +
b1 ,
#540
0'
06
0%
1&
b1 0
b1 *
b1 7
04
15
#550
1'
16
b0 <
b11 /
#560
0'
06
b0 0
b0 *
b0 7
#570
1'
16
b1 <
b100 /
bx ,
b1 -
#580
0'
06
b1 0
b1 *
b1 7
#590
1'
16
b10 <
18
1(
#600
0'
06
0&
1%
05
14
#610
1'
16
b1 :
b11 ;
b11 /
b1 +
b10 ,
b0 -
08
0(
#620
0'
06
#630
1'
16
b10 :
b100 ;
b10 /
b10 +
b11 ,
#640
0'
06
0%
